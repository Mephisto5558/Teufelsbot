{
  "categoryName": "Dev-Only",
  "categoryDescription": "Commands that should be available only to a dev",
  "blacklistuser": {
    "description": "(Un)blocks a user from using the bot",
    "usage": {
      "usage": "[off] <user id>"
    },
    "options": {
      "target": {
        "description": "The User ID you want to (un)block."
      }
    },
    "cantBlacklistDev": "I can't blacklist a developer of the bot!",
    "notFound": "Found no entry for this id.",
    "removed": "The blacklist entry for {user} has been removed.",
    "saved": "{user} has been blacklisted from using the bot."
  },
  "dbget": {
    "description": "query data from the database",
    "usage": {
      "usage": "<database name> <key>",
      "examples": "database a.b.c"
    },
    "options": {
      "database": {
        "description": "The database the entry is in."
      },
      "key": {
        "description": "The flattened key path"
      }
    },
    "notFound": "nothing found"
  },
  "eval": {
    "description": "inject JavaScript code directly into the bot",
    "usage": {
      "usage": "<js code>",
      "examples": "console.log('Hello World!')"
    },
    "options": {
      "code": {
        "description": "The JavaScript code to evaluate"
      }
    },
    "emptyRejection": "Empty Promise Rejection",
    "error": "{msg} with the following error:\n```\n{name}: {err}\n```",
    "finished": "evaluated command:\n{code}",
    "success": "{msg} without errors."
  },
  "exec": {
    "description": "inject Bash code directly into the bot's shell",
    "usage": {
      "usage": "<sh code>",
      "examples": "echo 'Hello World!'"
    },
    "options": {
      "command": {
        "description": "The bash command that should be executed"
      }
    },
    "error": "{msg} with the following error:\n```\n{name}: {err}\n```",
    "finished": "Evaluated bash command:\n{code}",
    "stderr": "stderr:\n{stderr}",
    "stdout": "{msg} with following output:\nstdout:\n{stdout}"
  },
  "reload": {
    "description": "reloads a file or category",
    "usage": {
      "usage": "<'command' | 'file'> <Path relative to cwd>\n{prefix}{cmdName} <command | '*'>",
      "examples": "file path/to/file\n{prefix}{cmdName} fun"
    },
    "options": {
      "command_name": {
        "description": "The name of the command to reload."
      }
    },
    "error": "An error occurred while reloading:\n{error}\nCheck the console for more information.",
    "invalidCommand": "This is not a valid command.",
    "invalidPath": "The specified path does not exist! Please note the case sensitivity of the path.",
    "noneReloaded": "No commands have been reloaded.",
    "reloaded": "The following {count} command(s) has/have been reloaded:\n{commands}"
  },
  "reloadconfig": {
    "description": "Reloads the config.json file",
    "error": "An error occurred while reloading the config:\n{err}",
    "success": "Reloaded the config."
  },
  "reloaddb": {
    "description": "Reloads the database",
    "success": "Reloaded the db."
  },
  "reloadlang": {
    "description": "Reloads all language files",
    "success": "Reloaded all language files."
  },
  "restart": {
    "description": "Restarts the bot",
    "alreadyRestarting": "The bot is already performing a restart, please wait for it to finish. Message: {url}",
    "restarting": "{emoji} Restarting bot...\nStarting node process...",
    "restartingError": "❌ Restart failed due to a Node error. Check the console for more information.",
    "success": "✅ Successfully restarted."
  },
  "setactivity": {
    "description": "Sets the bot's activity",
    "usage": {
      "usage": "[type] [activity]",
      "examples": "playing running commands"
    },
    "options": {
      "activity": {
        "description": "The status text you want me to have."
      },
      "type": {
        "description": "The activity's type"
      }
    },
    "reset": "My activity has been set to `none`.",
    "set": "My activity has been set to {name} of type {type}."
  },
  "setchangelog": {
    "description": "Updates the changelogs so users are up-to-date.",
    "success": "The changelog has been updated successfully."
  },
  "setcountingnumber": {
    "description": "Updates the last counting number for a channel, also resetting the last author.",
    "usage": {
      "usage": "[number (default 0)] [channel]",
      "examples": "7 #counting-channel"
    },
    "invalidChannel": "The provided channel is not a counting-channel!",
    "invalidNumber": "The provided number is invalid!",
    "success": "Counting for {channel} has been set to {number}."
  },
  "test": {
    "description": "testing stuff"
  },
  "todo": {
    "description": "Get links to the developer's todo list(s).",
    "discordNotes": "Dev notes in the support server",
    "list": "ToDo Excel",
    "website": "Voting Website"
  }
}