{
  "categoryName": "Owner-Only",
  "categoryDescription": "Commands that should be available only to the dev",
  "blacklistuser": {
    "description": "(Un)blocks a user from using the bot",
    "usage": {
      "usage": "[off] <user id>"
    },
    "notFound": "Found no entry for this id.",
    "saved": "`{user}` has been blacklisted from using the bot.",
    "removed": "The blacklist entry for `{user}` has been removed.",
    "cantBlacklistOwner": "I can't blacklist the owner of the bot!"
  },
  "dbget": {
    "description": "query data from the database",
    "usage": {
      "usage": "<database name> <key>",
      "examples": "database a.b.c"
    },
    "notFound": "nothing found"
  },
  "eval": {
    "description": "inject JavaScript code directly into the bot",
    "usage": {
      "usage": "<js code>",
      "examples": "console.log('Hello World!')"
    },
    "finished": "evaluated command:\n```js\n{code}\n```\n",
    "success": "{msg} without errors.",
    "emptyRejection": "Empty Promise Rejection",
    "error": "{msg} with the following error:\n```\n{name}: {err}\n```"
  },
  "exec": {
    "description": "inject Bash code directly into the bot's shell",
    "usage": {
      "usage": "<sh code>",
      "examples": "echo 'Hello World!'"
    },
    "finished": "Evaluated bash command:\n```sh\n{code}\n```\n",
    "stdout": "{msg} with following output:\nstdout:\n```\n{stdout}\n```\n",
    "stderr": "stderr:\n```\n{stderr}\n```",
    "error": "{msg} with the following error:\n```\n{name}: {err}\n```"
  },
  "reload": {
    "description": "reloads a file or category",
    "usage": {
      "usage": "<'command' | 'file'> <Path relative to cwd>\n{prefix}{cmdName} <command | '*'>",
      "examples": "file path/to/file\n{prefix}{cmdName} fun"
    },
    "invalidCommand": "This is not a valid command.",
    "invalidPath": "The specified path does not exist! Please note the case sensitivity of the path.",
    "error": "An error occurred while reloading:\n```{error}```\nCheck the console for more information.",
    "noneReloaded": "No commands have been reloaded.",
    "reloaded": "The following `{count}` command(s) has/have been reloaded:\n{commands}"
  },
  "reloadconfig": {
    "description": "Reloads the config.json file",
    "error": "An error occurred while reloading the config:\n{err}",
    "success": "Reloaded the config."
  },
  "reloaddb": {
    "description": "Reloads the database",
    "success": "Reloaded the db."
  },
  "reloadlang": {
    "description": "Reloads all language files",
    "success": "Reloaded all language files."
  },
  "restart": {
    "description": "Restarts the bot",
    "alreadyRestarting": "The bot is already performing a restart, please wait for it to finish. Message: {url}",
    "updatingNPM": "<a:loading:1265274270645354577> Restarting bot...\nInstalling packages...",
    "updateNPMError": "❌ Restart failed due to an NPM error. Check the console for more information.",
    "restarting": "<a:loading:1265274270645354577> Restarting bot...\nStarting node process...",
    "restartingError": "❌ Restart failed due to the an Node error. Check the console for more information.",
    "success": "✅ Successfully restarted."
  },
  "setactivity": {
    "description": "Sets the bot's activity",
    "usage": {
      "usage": "<activity>;[type]",
      "examples": "running commands;playing"
    },
    "invalidType": "This is not a valid type. Valid types are:\n`{types}`",
    "set": "My activity has been set to `{name}` of type `{type}`.",
    "reset": "My activity has been set to `none`."
  },
  "setchangelog": {
    "description": "Updates the changelogs so users are up-to-date.",
    "success": "The changelog has been updated successfully."
  },
  "setcountingnumber": {
    "description": "Updates the last counting number for a channel, also resetting the last author.",
    "usage": {
      "usage": "[number (default 0)] [channel]",
      "examples": "7 #counting-channel"
    },
    "invalidNumber": "The provided number is invalid!",
    "unknownChannel": "The provided channel id has not been found in this guild!",
    "success": "Counting for <#{channel}> has been set to **{number}**."
  },
  "test": {
    "description": "testing stuff"
  }
}